import sys

N = int(sys.stdin.readline())
arr = [int(sys.stdin.readline()) for _ in range(N)]
dp = [1] * N

for i in range(1, N):
    for j in range(0,i):
        if arr[j] < arr[i]:
            dp[i] = max(dp[i], dp[j]+1)

print(N - max(dp))

"""
LIS = 수열에서 임의의 원소들을 삭제했을 때 나올 수 있는 가장 긴 길이의 증가하는 부분수열
DP 테이블의 원소값 = 주어진 수열의 특정 값을 마지막 원소로 갖는 부분 수열의 최대 길이

      0  1  2  3  4  5
arr = 10 20 10 30 20 50

for i in range(1, N):
    for j in range(0,i):
        if arr[j] < arr[i]:
            dp[i] = max(dp[i], dp[j]+1)

-----------------------------------------------------
i = 1

j = 0
dp = [1, max(1, 1+1), 1, 1, 1, 1]
dp = [1, 2, 1, 1, 1, 1]
-----------------------------------------------------
i = 2

j = 0
(arr[0] < arr[2]이 성립하지 않으므로 DP 테이블 갱신x)

j = 1
(arr[1] < arr[2]이 성립하지 않으므로 DP 테이블 갱신x)
-----------------------------------------------------
i = 3

j = 0
dp = [1, 2, 1, max(1, 1+1), 1, 1]
dp = [1, 2, 1, 2, 1, 1]

j = 1
dp = [1, 2, 1, max(2, 2+1)]
dp = [1, 2, 1, 3, 1, 1]

j = 3
dp = [1, 2, 1, max(3, 1+1)]
dp = [1, 2, 1, 3, 1, 1]
-----------------------------------------------------
i = 4

j = 0
dp = [1, 2, 1, 3, max(1, 1+1), 1]
dp = [1, 2, 1, 3, 2, 1]

j = 1
(arr[1] < arr[4]이 성립하지 않으므로 DP 테이블 갱신x)

j = 2
dp = [1, 2, 1, 3, max(2, 1+1), 1]
dp = [1, 2, 1, 3, 2, 1]

j = 3
(arr[3] < arr[4]이 성립하지 않으므로 DP 테이블 갱신x)
-----------------------------------------------------
i = 5

j = 0
dp = [1, 2, 1, 3, 2, max(1, 1+1)]
dp = [1, 2, 1, 3, 2, 2]

j = 1
dp = [1, 2, 1, 3, 2, max(2, 2+1)]
dp = [1, 2, 1, 3, 2, 3]

j = 2
dp = [1, 2, 1, 3, 2, max(3, 1+1)]
dp = [1, 2, 1, 3, 2, 3]

j = 3
dp = [1, 2, 1, 3, 2, max(3, 3+1)]
dp = [1, 2, 1, 3, 2, 4]

j = 4
dp = [1, 2, 1, 3, 2, max(4, 2+1)]
dp = [1, 2, 1, 3, 2, 4]
"""